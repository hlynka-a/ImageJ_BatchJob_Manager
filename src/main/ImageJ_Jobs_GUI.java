package main;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.FileDialog;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.Writer;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/*public class ImageJ_Jobs_GUI {

}*/

import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

public class ImageJ_Jobs_GUI extends javax.swing.JFrame {

    /**
     * Creates new form JavaBatchJFrameClass
     */
    public ImageJ_Jobs_GUI() {
        //initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jtextarea_debug = new javax.swing.JTextArea();
        jlabel_debugtitle = new javax.swing.JLabel();
        jpanel_status = new javax.swing.JPanel();
        jlabel_status = new javax.swing.JLabel();
        jbutton_execute = new javax.swing.JButton();
        jbutton_cancel = new javax.swing.JButton();
        jcheckbox_task1 = new javax.swing.JCheckBox();
        jcheckbox_task2 = new javax.swing.JCheckBox();
        jcheckbox_task3 = new javax.swing.JCheckBox();
        jP_task01 = new javax.swing.JPanel();
        jTF_task01cmd = new javax.swing.JTextField();
        jTF_task01timeout = new javax.swing.JTextField();
        jTF_task01retry = new javax.swing.JTextField();
        jTF_task01threads = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTF_task01_1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTF_task01_2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTF_task01_3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTF_task01_4 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTF_task01_5 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTF_task01_6 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTF_task01_7 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTF_task01_8 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTF_task01_9 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTF_task01img = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTF_task01imgdir = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jP_task02 = new javax.swing.JPanel();
        jTF_task02cmd = new javax.swing.JTextField();
        jTF_task02timeout = new javax.swing.JTextField();
        jTF_task02retry = new javax.swing.JTextField();
        jTF_task02threads = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTF_task02_1 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTF_task02_2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTF_task02_3 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTF_task02_4 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTF_task02_5 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jTF_task02_6 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jTF_task02_7 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jTF_task02_8 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jTF_task02_9 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jTF_task02img = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jTF_task02imgdir = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jP_task03 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_file = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu_edit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Glomeruli Batch Job Manager");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jtextarea_debug.setColumns(20);
        jtextarea_debug.setRows(15);
        jtextarea_debug.setText("<debug output>");
        jScrollPane1.setViewportView(jtextarea_debug);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jlabel_debugtitle.setText("Debug Window:");
        jlabel_debugtitle.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 10);
        getContentPane().add(jlabel_debugtitle, gridBagConstraints);

        jpanel_status.setBackground(new java.awt.Color(255, 204, 51));

        jlabel_status.setText("Running...");

        javax.swing.GroupLayout jpanel_statusLayout = new javax.swing.GroupLayout(jpanel_status);
        jpanel_status.setLayout(jpanel_statusLayout);
        jpanel_statusLayout.setHorizontalGroup(
            jpanel_statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_statusLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jlabel_status)
                .addContainerGap(327, Short.MAX_VALUE))
        );
        jpanel_statusLayout.setVerticalGroup(
            jpanel_statusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_statusLayout.createSequentialGroup()
                .addComponent(jlabel_status)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jpanel_status, gridBagConstraints);

        jbutton_execute.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbutton_execute.setText("EXECUTE");
        jbutton_execute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            	LoadFromGUI();
            	Execute();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jbutton_execute, gridBagConstraints);
        
        jbutton_cancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbutton_cancel.setText("CANCEL NEXT JOB");
        jbutton_cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            	//LoadFromGUI();
            	//ClearOutput();
            	//Execute();
            	if (currentlyRunning == 0) {
            		UtilClass.DebugOutput("Cancel requested, but not currently running anything to cancel. Ignore request.");
            		return;
            	}
            	Cancel();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jbutton_cancel, gridBagConstraints);
        

        jcheckbox_task1.setSelected(true);
        jcheckbox_task1.setText("Run Task 1");
        jcheckbox_task1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
            	jcheckbox_all_ItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jcheckbox_task1, gridBagConstraints);

        jcheckbox_task2.setSelected(true);
        jcheckbox_task2.setText("Run Task 2");
        jcheckbox_task2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
            	jcheckbox_all_ItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jcheckbox_task2, gridBagConstraints);

        jcheckbox_task3.setSelected(true);
        jcheckbox_task3.setText("Run Task 3");
        jcheckbox_task3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
            	jcheckbox_all_ItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jcheckbox_task3, gridBagConstraints);

        jP_task01.setBackground(new java.awt.Color(204, 204, 204));
        jP_task01.setLayout(new java.awt.GridBagLayout());

        jTF_task01cmd.setText("task01cmd");
        jTF_task01cmd.setAutoscrolls(false);
        jTF_task01cmd.setPreferredSize(new java.awt.Dimension(259, 20));
        jTF_task01cmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //jTF_task01cmdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01cmd, gridBagConstraints);

        jTF_task01timeout.setText("60000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01timeout, gridBagConstraints);

        jTF_task01retry.setText("4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01retry, gridBagConstraints);

        jTF_task01threads.setText("3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01threads, gridBagConstraints);

        jLabel1.setText("Sys Command:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Timeout (ms):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Retry Limit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jP_task01.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Threads:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        jP_task01.add(jLabel4, gridBagConstraints);

        jLabel5.setText("||1||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_1, gridBagConstraints);

        jLabel6.setText("||2||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_2, gridBagConstraints);

        jLabel7.setText("||3||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_3, gridBagConstraints);

        jLabel8.setText("||4||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_4, gridBagConstraints);

        jLabel9.setText("||5||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_5, gridBagConstraints);

        jLabel10.setText("||6||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_6, gridBagConstraints);

        jLabel11.setText("||7||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel11, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_7, gridBagConstraints);

        jLabel12.setText("||8||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel12, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_8, gridBagConstraints);

        jLabel13.setText("||9||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01_9, gridBagConstraints);

        jLabel14.setText("input:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel14, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01img, gridBagConstraints);

        jLabel15.setText("input dir:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel15, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jTF_task01imgdir, gridBagConstraints);

        jLabel16.setText("<- (||1||,||2||,||3||, etc.)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task01.add(jLabel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jP_task01, gridBagConstraints);

        jP_task02.setBackground(new java.awt.Color(204, 204, 204));
        jP_task02.setLayout(new java.awt.GridBagLayout());

        jTF_task02cmd.setText("task01cmd");
        jTF_task02cmd.setAutoscrolls(false);
        jTF_task02cmd.setPreferredSize(new java.awt.Dimension(259, 20));
        jTF_task02cmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //jTF_task02cmdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02cmd, gridBagConstraints);

        jTF_task02timeout.setText("60000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02timeout, gridBagConstraints);

        jTF_task02retry.setText("4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02retry, gridBagConstraints);

        jTF_task02threads.setText("3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02threads, gridBagConstraints);

        jLabel17.setText("Sys Command:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel17, gridBagConstraints);

        jLabel18.setText("Timeout (ms):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel18, gridBagConstraints);

        jLabel19.setText("Retry Limit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jP_task02.add(jLabel19, gridBagConstraints);

        jLabel20.setText("Threads:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        jP_task02.add(jLabel20, gridBagConstraints);

        jLabel21.setText("||1||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel21, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_1, gridBagConstraints);

        jLabel22.setText("||2||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel22, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_2, gridBagConstraints);

        jLabel23.setText("||3||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel23, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_3, gridBagConstraints);

        jLabel24.setText("||4||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel24, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_4, gridBagConstraints);

        jLabel25.setText("||5||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel25, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_5, gridBagConstraints);

        jLabel26.setText("||6||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel26, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_6, gridBagConstraints);

        jLabel27.setText("||7||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel27, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_7, gridBagConstraints);

        jLabel28.setText("||8||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel28, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_8, gridBagConstraints);

        jLabel29.setText("||9||:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel29, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02_9, gridBagConstraints);

        jLabel30.setText("input:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel30, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02img, gridBagConstraints);

        jLabel31.setText("input dir:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel31, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jTF_task02imgdir, gridBagConstraints);

        jLabel32.setText("<- (||1||,||2||,||3||, etc.)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task02.add(jLabel32, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jP_task02, gridBagConstraints);

        jP_task03.setBackground(new java.awt.Color(204, 204, 204));
        jP_task03.setLayout(new java.awt.GridBagLayout());

        jLabel33.setText("This task combines resulting .csv files into one summary .csv file.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jP_task03.add(jLabel33, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jP_task03, gridBagConstraints);

        jMenu_file.setText("File");
        jMenuItem1.setText("Open / Load");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem1);
        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem2);
        jMenuItem3.setText("Save As");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu_file.add(jMenuItem3);
        jMenuBar1.add(jMenu_file);

        jMenu_edit.setText("Help");
        jMenuItem4.setText("About");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu_edit.add(jMenuItem4);
        jMenuItem5.setText("Help Docs");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu_edit.add(jMenuItem5);
        jMenuBar1.add(jMenu_edit);

        setJMenuBar(jMenuBar1);

        pack();
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // when "File -> open / load" is clicked
    	//System.out.println("File -> Open chosen.");
    	ClearOutput();
    	UtilClass.DebugOutput("File -> Open chosen...");
    	
    	FileDialog dialog = new FileDialog(this,"Open File",FileDialog.LOAD);
    	dialog.setDirectory(".");
    	dialog.setFile("*.txt");
    	dialog.setVisible(true);
    	String filename = dialog.getFile();
    	String fullpath = dialog.getDirectory();
    	if (filename == null) {
    		//System.out.println("No file chosen");
    		UtilClass.DebugOutput("File -> Open... no file chosen.");
    	} else {
    		//System.out.println("File chosen: " + filename);
    		//System.out.println("path = " + fullpath);
    		UtilClass.DebugOutput("File -> Open... file chosen: " + filename);
    		UtilClass.DebugOutput("FilePath = " + fullpath);
    		currentFilePath = fullpath;
    		currentFileName = filename;
    		LoadFile(fullpath, filename);
    	}
    	
    }   
    
    String currentFileName = null;
    String currentFilePath = null;
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
    	//System.out.println("File -> Save chosen");
    	ClearOutput();
    	UtilClass.DebugOutput("File -> Save chosen...");
    	
    	if (currentFileName == null || currentFilePath == null) {
    		SaveAsFileDialog();
    	} else {
    		SaveFile(currentFilePath, currentFileName);
    	}
    	
    	
    }
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {
    	//System.out.println("File -> Save As chosen");
    	ClearOutput();
    	UtilClass.DebugOutput("File -> Save As chosen...");
    	
    	SaveAsFileDialog();
    }
    
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {
    	//System.out.println("File -> Save As chosen");
    	ClearOutput();
    	UtilClass.DebugOutput("Glomeruli Batch Job Manager Program.");
    	UtilClass.DebugOutput("Version: " + UtilClass.version);
    	UtilClass.DebugOutput("Written in Java.");
    }
    
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {
    	//System.out.println("File -> Save As chosen");
    	ClearOutput();
    	thisManager.PrintHelpDocs(UtilClass.version);
    }
    
    private void SaveAsFileDialog() {
    	FileDialog dialog = new FileDialog(this,"Save File",FileDialog.SAVE);
    	dialog.setVisible(true);
    	
    	String filename = dialog.getFile();
    	String fullpath = dialog.getDirectory();
    	if (filename == null) {
    		//System.out.println("No file chosen");
    		UtilClass.DebugOutput("Save As... no file chosen.");
    	} else {
    		//System.out.println("File chosen: " + filename);
    		//System.out.println("path = " + fullpath);
    		currentFilePath = fullpath;
    		currentFileName = filename;
    		if (currentFileName.endsWith(".txt") == false) {
    			currentFileName += ".txt";
    		}
    		UtilClass.DebugOutput("Save As... file chosen: " + currentFileName);
    		UtilClass.DebugOutput("FilePath = " + currentFileName);
    		SaveFile(currentFilePath, currentFileName);
    	}
    }
    
    int currentlyRunning = 0;	//0 = not executing, 1 = in the middle of executing
    
	String paramFile = null;	//filepath
	boolean gui = true;
	boolean printParam = false;
	String functionMode = "1";		// example: 12	=> task 1 and task 2, in this order
	
	int task01maxThreads = 4;
	int task01timeout = 60000;
	int task01retryFails = 2;
	String task01cmd = "||1||ImageJ-win64.exe --file-name ||2||||3|| -macro ||4||||5||";
	String [][] task01input = new String[10][];
	String task01imagesDir = "";
	String task01images = "";
	
	int task02maxThreads = 4;
	int task02timeout = 60000;
	int task02retryFails = 2;
	String task02cmd = "||1||ImageJ-win64.exe --file-name ||2||||3|| -macro ||4||||5||";
	String[][] task02input = new String[10][];
	String task02imagesDir = "";
	String task02images = "";
    
    private void LoadFile(String filePath, String fileName) {
    	File inputFile = new File(filePath + fileName);
    	try {
			Scanner fileReader = new Scanner(inputFile);
			UtilClass.DebugOutput("---File Contents:---");
			while (fileReader.hasNextLine()) {
				String argsLine = fileReader.nextLine();
				UtilClass.DebugOutput("\t" + argsLine);
			}
			fileReader.close();
			UtilClass.DebugOutput("---End of File Contents.---");
			fileReader = new Scanner(inputFile);
			LoadDefaults();
			while (fileReader.hasNextLine()) {
				String argsLine = fileReader.nextLine();
				LoadFileLine(argsLine);
			}
			UpdateGUIValues();
			fileReader.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    }
    
    private void LoadDefaults() {
    	functionMode = "123";
    	task01maxThreads = 2;
		task01timeout = 10000;
		task01retryFails = 1;
		task01cmd = "sample cmd";
		task01input[1] = null;
		task01input[2] = null;
		task01input[3] = null;
		task01input[4] = null;
		task01input[5] = null;
		task01input[6] = null;
		task01input[7] = null;
		task01input[8] = null;
		task01input[9] = null;
		task01imagesDir = "";
		task01images = "";
    	task02maxThreads = 2;
    	task02timeout = 10000;
		task02retryFails = 1;
		task02cmd = "sample cmd";
		task02input[1] = null;
		task02input[2] = null;
		task02input[3] = null;
		task02input[4] = null;
		task02input[5] = null;
		task02input[6] = null;
		task02input[7] = null;
		task02input[8] = null;
		task02input[9] = null;
		task02imagesDir = "";
		task02images = "";
    }
    
    private void LoadFileLine(String argsLine) {
		if (argsLine.toLowerCase().contains("--gui") == true) {
			//gui = Boolean.parseBoolean(thisManager.ImageJ_ReadParameter("--gui=",argsLine,2));
		} else if (argsLine.toLowerCase().contains("--functionmode") == true) {
			functionMode = thisManager.ImageJ_ReadParameter("--functionmode=",argsLine,0);
		} else if (argsLine.toLowerCase().contains("--task01maxthreads") == true) {
			task01maxThreads = Integer.parseInt(thisManager.ImageJ_ReadParameter("--task01maxthreads=",argsLine,1));
		} else if (argsLine.toLowerCase().contains("--task01timeout") == true) {
			task01timeout = Integer.parseInt(thisManager.ImageJ_ReadParameter("--task01timeout=",argsLine,1));
		} else if (argsLine.toLowerCase().contains("--task01retryfails") == true) {
			task01retryFails = Integer.parseInt(thisManager.ImageJ_ReadParameter("--task01retryfails=",argsLine,1));
		} else if (argsLine.toLowerCase().contains("--task01cmd") == true) {
			task01cmd = thisManager.ImageJ_ReadParameter("--task01cmd=",argsLine,0);
		} else if (argsLine.toLowerCase().contains("--task01input01") == true) {
			task01input[1] = thisManager.ImageJ_ReadParameterArray("--task01input01=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01input02") == true) {
			task01input[2] = thisManager.ImageJ_ReadParameterArray("--task01input02=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01input03") == true) {
			task01input[3] = thisManager.ImageJ_ReadParameterArray("--task01input03=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01input04") == true) {
			task01input[4] = thisManager.ImageJ_ReadParameterArray("--task01input04=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01input05") == true) {
			task01input[5] = thisManager.ImageJ_ReadParameterArray("--task01input05=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01input06") == true) {
			task01input[6] = thisManager.ImageJ_ReadParameterArray("--task01input06=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01input07") == true) {
			task01input[7] = thisManager.ImageJ_ReadParameterArray("--task01input07=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01input08") == true) {
			task01input[8] = thisManager.ImageJ_ReadParameterArray("--task01input08=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01input09") == true) {
			task01input[9] = thisManager.ImageJ_ReadParameterArray("--task01input09=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task01imagesdir") == true) {
			task01imagesDir = thisManager.ImageJ_ReadParameter("--task01imagesdir=",argsLine,0);
		} else if (argsLine.toLowerCase().contains("--task01images") == true) {
			task01images = thisManager.ImageJ_ReadParameter("--task01images=",argsLine,0);
		} else if (argsLine.toLowerCase().contains("--task02maxthreads") == true) {
			task02maxThreads = Integer.parseInt(thisManager.ImageJ_ReadParameter("--task02maxthreads=",argsLine,1));
		} else if (argsLine.toLowerCase().contains("--task02timeout") == true) {
			task02timeout = Integer.parseInt(thisManager.ImageJ_ReadParameter("--task02timeout=",argsLine,1));
		} else if (argsLine.toLowerCase().contains("--task02retryfails") == true) {
			task02retryFails = Integer.parseInt(thisManager.ImageJ_ReadParameter("--task02retryfails=",argsLine,1));
		} else if (argsLine.toLowerCase().contains("--task02cmd") == true) {
			task02cmd = thisManager.ImageJ_ReadParameter("--task02cmd=",argsLine,0);
		} else if (argsLine.toLowerCase().contains("--task02input01") == true) {
			task02input[1] = thisManager.ImageJ_ReadParameterArray("--task02input01=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02input02") == true) {
			task02input[2] = thisManager.ImageJ_ReadParameterArray("--task02input02=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02input03") == true) {
			task02input[3] = thisManager.ImageJ_ReadParameterArray("--task02input03=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02input04") == true) {
			task02input[4] = thisManager.ImageJ_ReadParameterArray("--task02input04=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02input05") == true) {
			task02input[5] = thisManager.ImageJ_ReadParameterArray("--task02input05=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02input06") == true) {
			task02input[6] = thisManager.ImageJ_ReadParameterArray("--task02input06=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02input07") == true) {
			task02input[7] = thisManager.ImageJ_ReadParameterArray("--task02input07=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02input08") == true) {
			task02input[8] = thisManager.ImageJ_ReadParameterArray("--task02input08=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02input09") == true) {
			task02input[9] = thisManager.ImageJ_ReadParameterArray("--task02input09=", argsLine);
		} else if (argsLine.toLowerCase().contains("--task02imagesdir") == true) {
			task02imagesDir = thisManager.ImageJ_ReadParameter("--task02imagesdir=",argsLine,0);
		} else if (argsLine.toLowerCase().contains("--task02images") == true) {
			task02images = thisManager.ImageJ_ReadParameter("--task02images=",argsLine,0);
		} 
    }
    
    private void LoadFromGUI() {
    	
    	String nFunctionMode = "";
    	if (jcheckbox_task1.isSelected() == true) {
    		nFunctionMode += "1";
    	}
    	if (jcheckbox_task2.isSelected() == true) {
    		nFunctionMode += "2";
    	}
    	if (jcheckbox_task3.isSelected() == true) {
    		nFunctionMode += "3";
    	}
    	functionMode = nFunctionMode;
    	
    	task01cmd = jTF_task01cmd.getText();
    	task01maxThreads = Integer.parseInt(jTF_task01threads.getText());
    	task01timeout = Integer.parseInt(jTF_task01timeout.getText());
    	task01retryFails = Integer.parseInt(jTF_task01retry.getText());
    	task01input = new String[10][];
		if (jTF_task01_1.getText() != null && jTF_task01_1.getText().length() > 0) {
			task01input[1] = thisManager.ImageJ_ReadParameterArray("--task01input01=", "--task01input01=" + jTF_task01_1.getText());
		}
		if (jTF_task01_2.getText() != null && jTF_task01_2.getText().length() > 0) {
			task01input[2] = thisManager.ImageJ_ReadParameterArray("--task01input02=", "--task01input02=" + jTF_task01_2.getText());
		}
		if (jTF_task01_3.getText() != null && jTF_task01_3.getText().length() > 0) {
			task01input[3] = thisManager.ImageJ_ReadParameterArray("--task01input03=", "--task01input03=" + jTF_task01_3.getText());
		}
		if (jTF_task01_4.getText() != null && jTF_task01_4.getText().length() > 0) {
			task01input[4] = thisManager.ImageJ_ReadParameterArray("--task01input04=", "--task01input04=" + jTF_task01_4.getText());
		}
		if (jTF_task01_5.getText() != null && jTF_task01_5.getText().length() > 0) {
			task01input[5] = thisManager.ImageJ_ReadParameterArray("--task01input05=", "--task01input05=" + jTF_task01_5.getText());
		}
		if (jTF_task01_6.getText() != null && jTF_task01_6.getText().length() > 0) {
			task01input[6] = thisManager.ImageJ_ReadParameterArray("--task01input06=", "--task01input06=" + jTF_task01_6.getText());
		}
		if (jTF_task01_7.getText() != null && jTF_task01_7.getText().length() > 0) {
			task01input[7] = thisManager.ImageJ_ReadParameterArray("--task01input07=", "--task01input07=" + jTF_task01_7.getText());
		}
		if (jTF_task01_8.getText() != null && jTF_task01_8.getText().length() > 0) {
			task01input[8] = thisManager.ImageJ_ReadParameterArray("--task01input08=", "--task01input08=" + jTF_task01_8.getText());
		}
		if (jTF_task01_9.getText() != null && jTF_task01_9.getText().length() > 0) {
			task01input[9] = thisManager.ImageJ_ReadParameterArray("--task01input09=", "--task01input09=" + jTF_task01_9.getText());
		}
		task01images = jTF_task01img.getText();
		task01imagesDir = jTF_task01imgdir.getText();
		
    	task02cmd = jTF_task02cmd.getText();
    	task02maxThreads = Integer.parseInt(jTF_task02threads.getText());
    	task02timeout = Integer.parseInt(jTF_task02timeout.getText());
    	task02retryFails = Integer.parseInt(jTF_task02retry.getText());
    	task02input = new String[10][];
		if (jTF_task02_1.getText() != null && jTF_task02_1.getText().length() > 0) {
			task02input[1] = thisManager.ImageJ_ReadParameterArray("--task02input01=", "--task02input01=" + jTF_task02_1.getText());
		}
		if (jTF_task02_2.getText() != null && jTF_task02_2.getText().length() > 0) {
			task02input[2] = thisManager.ImageJ_ReadParameterArray("--task02input02=", "--task02input02=" + jTF_task02_2.getText());
		}
		if (jTF_task02_3.getText() != null && jTF_task02_3.getText().length() > 0) {
			task02input[3] = thisManager.ImageJ_ReadParameterArray("--task02input03=", "--task02input03=" + jTF_task02_3.getText());
		}
		if (jTF_task02_4.getText() != null && jTF_task02_4.getText().length() > 0) {
			task02input[4] = thisManager.ImageJ_ReadParameterArray("--task02input04=", "--task02input04=" + jTF_task02_4.getText());
		}
		if (jTF_task02_5.getText() != null && jTF_task02_5.getText().length() > 0) {
			task02input[5] = thisManager.ImageJ_ReadParameterArray("--task02input05=", "--task02input05=" + jTF_task02_5.getText());
		}
		if (jTF_task02_6.getText() != null && jTF_task02_6.getText().length() > 0) {
			task02input[6] = thisManager.ImageJ_ReadParameterArray("--task02input06=", "--task02input06=" + jTF_task02_6.getText());
		}
		if (jTF_task02_7.getText() != null && jTF_task02_7.getText().length() > 0) {
			task02input[7] = thisManager.ImageJ_ReadParameterArray("--task02input07=", "--task02input07=" + jTF_task02_7.getText());
		}
		if (jTF_task02_8.getText() != null && jTF_task02_8.getText().length() > 0) {
			task02input[8] = thisManager.ImageJ_ReadParameterArray("--task02input08=", "--task02input08=" + jTF_task02_8.getText());
		}
		if (jTF_task02_9.getText() != null && jTF_task02_9.getText().length() > 0) {
			task02input[9] = thisManager.ImageJ_ReadParameterArray("--task02input09=", "--task02input09=" + jTF_task02_9.getText());
		}
		task02images = jTF_task02img.getText();
		task02imagesDir = jTF_task02imgdir.getText();
    }
    
    private void UpdateGUIValues() {
    	if (functionMode.contains("1") == true) {
    		jcheckbox_task1.setSelected(true);
    	} else {
    		jcheckbox_task1.setSelected(false);
    	}
    	if (functionMode.contains("2") == true) {
    		jcheckbox_task2.setSelected(true);
    	} else {
    		jcheckbox_task2.setSelected(false);
    	}
    	if (functionMode.contains("3") == true) {
    		jcheckbox_task3.setSelected(true);
    	} else {
    		jcheckbox_task3.setSelected(false);
    	}
    	
    	jTF_task01cmd.setText(task01cmd);
    	jTF_task01timeout.setText("" + task01timeout);
    	jTF_task01retry.setText("" + task01retryFails);
    	jTF_task01threads.setText("" + task01maxThreads);
    	jTF_task01img.setText("" + task01images);
    	jTF_task01imgdir.setText("" + task01imagesDir);
    	jTF_task01_1.setText("");
    	jTF_task01_2.setText("");
    	jTF_task01_3.setText("");
    	jTF_task01_4.setText("");
    	jTF_task01_5.setText("");
    	jTF_task01_6.setText("");
    	jTF_task01_7.setText("");
    	jTF_task01_8.setText("");
    	jTF_task01_9.setText("");
    	for (int i = 1; i < task01input.length; i++) {
    		String totalString = "";
    		if (task01input[i] != null) {
	    		for (int j = 0; j < task01input[i].length; j++) {
	    			totalString += task01input[i][j];
	    			if (j < task01input[i].length - 1) {
	    				totalString += ",";
	    			}
	    		}
    		}
    		if (i == 1) {
    			jTF_task01_1.setText(totalString);
    		} else if (i == 2) {
    			jTF_task01_2.setText(totalString);
    		} else if (i == 3) {
    			jTF_task01_3.setText(totalString);
    		} else if (i == 4) {
    			jTF_task01_4.setText(totalString);
    		} else if (i == 5) {
    			jTF_task01_5.setText(totalString);
    		} else if (i == 6) {
    			jTF_task01_6.setText(totalString);
    		} else if (i == 7) {
    			jTF_task01_7.setText(totalString);
    		} else if (i == 8) {
    			jTF_task01_8.setText(totalString);
    		} else if (i == 9) {
    			jTF_task01_9.setText(totalString);
    		}
    	}
    	
    	jTF_task02cmd.setText(task02cmd);
    	jTF_task02timeout.setText("" + task02timeout);
    	jTF_task02retry.setText("" + task02retryFails);
    	jTF_task02threads.setText("" + task02maxThreads);
    	jTF_task02img.setText("" + task02images);
    	jTF_task02imgdir.setText("" + task02imagesDir);
    	jTF_task02_1.setText("");
    	jTF_task02_2.setText("");
    	jTF_task02_3.setText("");
    	jTF_task02_4.setText("");
    	jTF_task02_5.setText("");
    	jTF_task02_6.setText("");
    	jTF_task02_7.setText("");
    	jTF_task02_8.setText("");
    	jTF_task02_9.setText("");
       	for (int i = 1; i < task02input.length; i++) {
    		String totalString = "";
    		if (task02input[i] != null) {
	    		for (int j = 0; j < task02input[i].length; j++) {
	    			totalString += task02input[i][j];
	    			if (j < task02input[i].length - 1) {
	    				totalString += ",";
	    			}
	    		}
    		}
    		if (i == 1) {
    			jTF_task02_1.setText(totalString);
    		} else if (i == 2) {
    			jTF_task02_2.setText(totalString);
    		} else if (i == 3) {
    			jTF_task02_3.setText(totalString);
    		} else if (i == 4) {
    			jTF_task02_4.setText(totalString);
    		} else if (i == 5) {
    			jTF_task02_5.setText(totalString);
    		} else if (i == 6) {
    			jTF_task02_6.setText(totalString);
    		} else if (i == 7) {
    			jTF_task02_7.setText(totalString);
    		} else if (i == 8) {
    			jTF_task02_8.setText(totalString);
    		} else if (i == 9) {
    			jTF_task02_9.setText(totalString);
    		}
    	}
    }
    
    private void SaveFile(String filePath, String fileName) {
    	UtilClass.DebugOutput("Saving file to: " + filePath + fileName);
    	try {
			Writer wr = new FileWriter(filePath + fileName);
			wr.write("--gui=true" + "\n");
			String functionMode = "";
			if (jcheckbox_task1.isSelected() == true) {
				functionMode += "1";
			} 
			if (jcheckbox_task2.isSelected() == true) {
				functionMode += "2";
			} 
			if (jcheckbox_task3.isSelected() == true) {
				functionMode += "3";
			} 
			wr.write("--functionMode=" + functionMode + "\n");
			
			if (jTF_task01cmd.getText() != null && jTF_task01cmd.getText().length() > 0) {
				wr.write("--task01cmd=" + jTF_task01cmd.getText() + "\n");
			}
			if (jTF_task01_1.getText() != null && jTF_task01_1.getText().length() > 0) {
				wr.write("--task01input01=" + jTF_task01_1.getText() + "\n");
			}
			if (jTF_task01_2.getText() != null && jTF_task01_2.getText().length() > 0) {
				wr.write("--task01input02=" + jTF_task01_2.getText() + "\n");
			}
			if (jTF_task01_3.getText() != null && jTF_task01_3.getText().length() > 0) {
				wr.write("--task01input03=" + jTF_task01_3.getText() + "\n");
			}
			if (jTF_task01_4.getText() != null && jTF_task01_4.getText().length() > 0) {
				wr.write("--task01input04=" + jTF_task01_4.getText() + "\n");
			}
			if (jTF_task01_5.getText() != null && jTF_task01_5.getText().length() > 0) {
				wr.write("--task01input05=" + jTF_task01_5.getText() + "\n");
			}
			if (jTF_task01_6.getText() != null && jTF_task01_6.getText().length() > 0) {
				wr.write("--task01input06=" + jTF_task01_6.getText() + "\n");
			}
			if (jTF_task01_7.getText() != null && jTF_task01_7.getText().length() > 0) {
				wr.write("--task01input07=" + jTF_task01_7.getText() + "\n");
			}
			if (jTF_task01_8.getText() != null && jTF_task01_8.getText().length() > 0) {
				wr.write("--task01input08=" + jTF_task01_8.getText() + "\n");
			}
			if (jTF_task01_9.getText() != null && jTF_task01_9.getText().length() > 0) {
				wr.write("--task01input09=" + jTF_task01_9.getText() + "\n");
			}
			if (jTF_task01threads.getText() != null && jTF_task01threads.getText().length() > 0) {
				wr.write("--task01maxThreads=" + jTF_task01threads.getText() + "\n");
			}
			if (jTF_task01retry.getText() != null && jTF_task01retry.getText().length() > 0) {
				wr.write("--task01retryFails=" + jTF_task01retry.getText() + "\n");
			}
			if (jTF_task01timeout.getText() != null && jTF_task01timeout.getText().length() > 0) {
				wr.write("--task01timeout=" + jTF_task01timeout.getText() + "\n");
			}
			if (jTF_task01img.getText() != null && jTF_task01img.getText().length() > 0) {
				wr.write("--task01images=" + jTF_task01img.getText() + "\n");
			}
			if (jTF_task01imgdir.getText() != null && jTF_task01imgdir.getText().length() > 0) {
				wr.write("--task01imagesDir=" + jTF_task01imgdir.getText() + "\n");
			}

			if (jTF_task02cmd.getText() != null && jTF_task02cmd.getText().length() > 0) {
				wr.write("--task02cmd=" + jTF_task02cmd.getText() + "\n");
			}
			if (jTF_task02_1.getText() != null && jTF_task02_1.getText().length() > 0) {
				wr.write("--task02input01=" + jTF_task02_1.getText() + "\n");
			}
			if (jTF_task02_2.getText() != null && jTF_task02_2.getText().length() > 0) {
				wr.write("--task02input02=" + jTF_task02_2.getText() + "\n");
			}
			if (jTF_task02_3.getText() != null && jTF_task02_3.getText().length() > 0) {
				wr.write("--task02input03=" + jTF_task02_3.getText() + "\n");
			}
			if (jTF_task02_4.getText() != null && jTF_task02_4.getText().length() > 0) {
				wr.write("--task02input04=" + jTF_task02_4.getText() + "\n");
			}
			if (jTF_task02_5.getText() != null && jTF_task02_5.getText().length() > 0) {
				wr.write("--task02input05=" + jTF_task02_5.getText() + "\n");
			}
			if (jTF_task02_6.getText() != null && jTF_task02_6.getText().length() > 0) {
				wr.write("--task02input06=" + jTF_task02_6.getText() + "\n");
			}
			if (jTF_task02_7.getText() != null && jTF_task02_7.getText().length() > 0) {
				wr.write("--task02input07=" + jTF_task02_7.getText() + "\n");
			}
			if (jTF_task02_8.getText() != null && jTF_task02_8.getText().length() > 0) {
				wr.write("--task02input08=" + jTF_task02_8.getText() + "\n");
			}
			if (jTF_task02_9.getText() != null && jTF_task02_9.getText().length() > 0) {
				wr.write("--task02input09=" + jTF_task02_9.getText() + "\n");
			}
			if (jTF_task02threads.getText() != null && jTF_task02threads.getText().length() > 0) {
				wr.write("--task02maxThreads=" + jTF_task02threads.getText() + "\n");
			}
			if (jTF_task02retry.getText() != null && jTF_task02retry.getText().length() > 0) {
				wr.write("--task02retryFails=" + jTF_task02retry.getText() + "\n");
			}
			if (jTF_task02timeout.getText() != null && jTF_task02timeout.getText().length() > 0) {
				wr.write("--task02timeout=" + jTF_task02timeout.getText() + "\n");
			}
			if (jTF_task02img.getText() != null && jTF_task02img.getText().length() > 0) {
				wr.write("--task02images=" + jTF_task02img.getText() + "\n");
			}
			if (jTF_task02imgdir.getText() != null && jTF_task02imgdir.getText().length() > 0) {
				wr.write("--task02imagesDir=" + jTF_task02imgdir.getText() + "\n");
			}
			wr.flush();
			wr.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	UtilClass.DebugOutput("File saved. Saved to: " + filePath + fileName);
    }
    
    /*private void SaveAsFile(String filePath, String fileName) {
    	
    }*/

    private void jcheckbox_all_ItemStateChanged(java.awt.event.ItemEvent evt) {                                                 
        // TODO add your handling code here:
    	//System.out.println("Checkbox clicked.");
    	
    	boolean enabled = false;
    	enabled = jcheckbox_task1.isSelected();
    	jP_task01.setEnabled(enabled);
    	jTF_task01cmd.setEnabled(enabled);
    	jTF_task01timeout.setEnabled(enabled);
    	jTF_task01retry.setEnabled(enabled);
    	jTF_task01threads.setEnabled(enabled);
    	jTF_task01_1.setEnabled(enabled);
    	jTF_task01_2.setEnabled(enabled);
    	jTF_task01_3.setEnabled(enabled);
    	jTF_task01_4.setEnabled(enabled);
    	jTF_task01_5.setEnabled(enabled);
   		jTF_task01_6.setEnabled(enabled);
    	jTF_task01_7.setEnabled(enabled);
   		jTF_task01_8.setEnabled(enabled);
    	jTF_task01_9.setEnabled(enabled);
    	jTF_task01img.setEnabled(enabled);
    	jTF_task01imgdir.setEnabled(enabled);
    	jLabel1.setEnabled(enabled);
    	jLabel2.setEnabled(enabled);
    	jLabel3.setEnabled(enabled);
    	jLabel4.setEnabled(enabled);
    	jLabel5.setEnabled(enabled);
    	jLabel6.setEnabled(enabled);
    	jLabel7.setEnabled(enabled);
    	jLabel8.setEnabled(enabled);
    	jLabel9.setEnabled(enabled);
    	jLabel10.setEnabled(enabled);
    	jLabel11.setEnabled(enabled);
    	jLabel12.setEnabled(enabled);
    	jLabel13.setEnabled(enabled);
    	jLabel14.setEnabled(enabled);
    	jLabel15.setEnabled(enabled);
    	jLabel16.setEnabled(enabled);
    	
    	enabled = jcheckbox_task2.isSelected();
    	jP_task02.setEnabled(enabled);
    	jTF_task02cmd.setEnabled(enabled);
    	jTF_task02timeout.setEnabled(enabled);
    	jTF_task02retry.setEnabled(enabled);
    	jTF_task02threads.setEnabled(enabled);
    	jTF_task02_1.setEnabled(enabled);
    	jTF_task02_2.setEnabled(enabled);
    	jTF_task02_3.setEnabled(enabled);
    	jTF_task02_4.setEnabled(enabled);
    	jTF_task02_5.setEnabled(enabled);
    	jTF_task02_6.setEnabled(enabled);
    	jTF_task02_7.setEnabled(enabled);
    	jTF_task02_8.setEnabled(enabled);
    	jTF_task02_9.setEnabled(enabled);
    	jTF_task02img.setEnabled(enabled);
    	jTF_task02imgdir.setEnabled(enabled);
    	jLabel17.setEnabled(enabled);
    	jLabel18.setEnabled(enabled);
    	jLabel19.setEnabled(enabled);
    	jLabel20.setEnabled(enabled);
    	jLabel21.setEnabled(enabled);
    	jLabel22.setEnabled(enabled);
    	jLabel23.setEnabled(enabled);
    	jLabel24.setEnabled(enabled);
    	jLabel25.setEnabled(enabled);
    	jLabel26.setEnabled(enabled);
    	jLabel27.setEnabled(enabled);
    	jLabel28.setEnabled(enabled);
    	jLabel29.setEnabled(enabled);
    	jLabel30.setEnabled(enabled);
    	jLabel31.setEnabled(enabled);
    	jLabel32.setEnabled(enabled);

    	enabled = jcheckbox_task3.isSelected();
    	jP_task03.setEnabled(enabled);
    	jLabel33.setEnabled(enabled);
    }    
    
    /*public void DebugOutput(String message) {
    	System.out.println(message);
    	
    	jtextarea_debug.setText(jtextarea_debug.getText() + "\n" + message);
    }*/
    
    public class ExampleWorker extends SwingWorker<Integer, Integer>{

		@Override
		protected Integer doInBackground() throws Exception {
		
			if (currentlyRunning == 1) {
				UtilClass.DebugOutput("Already executing something, please wait for that to finish... Ignoring new Execute request.");
				return 0;
			}
			
			ClearOutput();
			currentlyRunning = 1;
			
			int resultStatus = 0;	//0 = not done, -1 = error, 1 = success, -2 = requested to cancel
			
			UtilClass.StatusOutput("Launching...", Color.LIGHT_GRAY);
			UtilClass.DebugOutput("Starting up ImageJ Batch Job Handler (or whatever software we're launching multiple instances of) in 2 seconds.");
			UtilClass.DebugOutput("VERSION: " + UtilClass.version);
			UtilClass.DebugOutput("---");
			try {
				TimeUnit.SECONDS.sleep(2);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			if (cancelRequest == 1) {
				UtilClass.DebugOutput("Requested to cancel. Do not proceed to next process.");
				cancelRequest = 0;
				currentlyRunning = 0;
				UtilClass.StatusOutput("Cancelation complete.", Color.GRAY);
				return -2;
			}
			
			UtilClass.StatusOutput("Running...", Color.orange);
			if (functionMode.contains("1") == true) {
				// if inputData == null and inputDataDir != null, read all image files in that immediate directory
				UtilClass.DebugOutput("Starting task 01...");
				if (task01images.length()>0 && task01imagesDir.length()>0) {
					UtilClass.DebugOutput("Reading image input...");
					int task01imagesNum = Integer.parseInt(task01images.replace("|", ""));
					int task01imagesDirNum = Integer.parseInt(task01imagesDir.replace("|", ""));
					if ((task01input[task01imagesNum] == null || task01input[task01imagesNum].length == 0) && (task01input[task01imagesDirNum] != null)) {
						File fileDirectory = new File (task01input[task01imagesDirNum][0]);
						if (fileDirectory.isDirectory() == true) {
							File[] f = fileDirectory.listFiles(new FilenameFilter() {
								@Override
								public boolean accept(File dir, String name) {
									boolean returnValue = false;
									if (name.toLowerCase().endsWith(".jpg")
											|| name.toLowerCase().endsWith(".jpeg")
											|| name.toLowerCase().endsWith(".png")
											|| name.toLowerCase().endsWith(".gif")
											|| name.toLowerCase().endsWith(".tif")
											|| name.toLowerCase().endsWith(".tiff")) {
										returnValue = true;
									}
									return returnValue;
								}
							});
							task01input[task01imagesNum] = new String[f.length];
							for (int i = 0; i < f.length; i++) {
								task01input[task01imagesNum][i] = f[i].getName();
							}
						}	
					}
				} else {
					task01images = "-1";
					task01imagesDir = "-1";
				}
				if (printParam == true) {
					UtilClass.DebugOutput("****These are the recognized input parameters (if not specified by the user, these are the defaults).****");
					UtilClass.DebugOutput("gui = " + gui);
					UtilClass.DebugOutput("functionMode = " + functionMode);
					UtilClass.DebugOutput("task01maxThreads = " + task01maxThreads);
					UtilClass.DebugOutput("task01timeout = " + task01timeout);
					UtilClass.DebugOutput("task01retryFails = " + task01retryFails);
					UtilClass.DebugOutput("task01cmd = " + task01cmd);
					UtilClass.DebugOutput("task01imagesDir = " + task01imagesDir);
					UtilClass.DebugOutput("task01images = " + task01images);
					for (int a = 0; a < task01input.length; a++) {
						if (task01input[a] != null) {
							UtilClass.DebugOutput("task01input0" + a + " = ");
							for (int b = 0; b < task01input[a].length; b++) {
								UtilClass.DebugOutput(task01input[a][b]);
								if (b < task01input[a].length - 1) {
									UtilClass.DebugOutput(", ");
								}
							}
							UtilClass.DebugOutput("\n");
						}
					}
					UtilClass.DebugOutput("****End of input parameters.****\n\n");
				}
				thisManager.task01maxThreads = task01maxThreads;
				thisManager.task01timeout = task01timeout;
				thisManager.task01retryFails = task01retryFails;
				thisManager.task01cmd = task01cmd;
				thisManager.task01input = task01input;
				thisManager.task01images = Integer.parseInt(task01images.replace("|", ""));
				thisManager.task01imagesDir = Integer.parseInt(task01imagesDir.replace("|", ""));
				UtilClass.DebugOutput("Begin running...");
				if (resultStatus >= 0) {
					//resultStatus = thisManager.Initialize_Start();
					if (thisManager.task01images == -1 && thisManager.task01imagesDir == -1) {
						UtilClass.DebugOutput("Running Single Thread Task 1");
						resultStatus = thisManager.RunTask01SingleThread();
					} else {
						UtilClass.DebugOutput("Running Generic Task 1");
						resultStatus = thisManager.RunGenericTask(1);
					}
					UtilClass.DebugOutput("ResultStatus = " + resultStatus);
				} else {
					//thisManager.Initialize_Start();
					/*if (thisManager.task01images == -1 && thisManager.task01imagesDir == -1) {
						thisManager.RunTask01SingleThread();
					} else {
						thisManager.RunTask01();
					}*/
				}
			}
			/*if (cancelRequest == 1) {
				UtilClass.DebugOutput("Requested to cancel. Do not proceed to next process.");
				cancelRequest = 0;
				return -2;
			}*/
			if (functionMode.contains("2") == true) {
				if (task02images.length()>0 && task02imagesDir.length()>0) {
					int task02imagesNum = Integer.parseInt(task02images.replace("|", ""));
					int task02imagesDirNum = Integer.parseInt(task02imagesDir.replace("|", ""));
					if ((task02input[task02imagesNum] == null || task02input[task02imagesNum].length == 0) && (task02input[task02imagesDirNum] != null)) {
						File fileDirectory = new File (task02input[task02imagesDirNum][0]);
						if (fileDirectory.isDirectory() == true) {
							File[] f = fileDirectory.listFiles(new FilenameFilter() {
								@Override
								public boolean accept(File dir, String name) {
									boolean returnValue = false;
									if (name.toLowerCase().endsWith(".jpg")
											|| name.toLowerCase().endsWith(".jpeg")
											|| name.toLowerCase().endsWith(".png")
											|| name.toLowerCase().endsWith(".gif")
											|| name.toLowerCase().endsWith(".tif")
											|| name.toLowerCase().endsWith(".tiff")) {
										returnValue = true;
									}
									return returnValue;
								}
							});
							task02input[task02imagesNum] = new String[f.length];
							for (int i = 0; i < f.length; i++) {
								task02input[task02imagesNum][i] = f[i].getName();
							}
						}	
					}
				} else {
					task02images = "-1";
					task02imagesDir = "-1";
				}
				if (printParam == true) {
					UtilClass.DebugOutput("****These are the recognized input parameters (if not specified by the user, these are the defaults).****");
					UtilClass.DebugOutput("task02maxThreads = " + task02maxThreads);
					UtilClass.DebugOutput("task02timeout = " + task02timeout);
					UtilClass.DebugOutput("task02retryFails = " + task02retryFails);
					UtilClass.DebugOutput("task02cmd = " + task02cmd);
					UtilClass.DebugOutput("task02imagesDir = " + task02imagesDir);
					UtilClass.DebugOutput("task02images = " + task02images);
					for (int a = 0; a < task02input.length; a++) {
						if (task02input[a] != null) {
							UtilClass.DebugOutput("task02input0" + a + " = ");
							for (int b = 0; b < task02input[a].length; b++) {
								UtilClass.DebugOutput(task02input[a][b]);
								if (b < task02input[a].length - 1) {
									UtilClass.DebugOutput(", ");
								}
							}
							UtilClass.DebugOutput("\n");
						}
					}
					UtilClass.DebugOutput("****End of input parameters.****\n\n");
				}
				thisManager.task02maxThreads = task02maxThreads;
				thisManager.task02timeout = task02timeout;
				thisManager.task02retryFails = task02retryFails;
				thisManager.task02cmd = task02cmd;
				thisManager.task02input = task02input;
				thisManager.task02images = Integer.parseInt(task02images.replace("|", ""));
				thisManager.task02imagesDir = Integer.parseInt(task02imagesDir.replace("|", ""));
				if (resultStatus >= 0) {
					//resultStatus = thisManager.ImageJ_StartJobs();
					if (thisManager.task02images == -1 && thisManager.task02imagesDir == -1) {
						resultStatus = thisManager.RunTask02SingleThread();
					} else {
						resultStatus = thisManager.RunGenericTask(2);
					}
					UtilClass.DebugOutput("ResultStatus = " + resultStatus);
				} else {
					//thisManager.ImageJ_StartJobs();
					/*if (thisManager.task02images == -1 && thisManager.task02imagesDir == -1) {
						thisManager.RunTask02SingleThread();
					} else {
						thisManager.RunTask02();
					}*/
				}
			} 
			/*if (cancelRequest == 1) {
				UtilClass.DebugOutput("Requested to cancel. Do not proceed to next process.");
				cancelRequest = 0;
				return -2;
			}*/
			if (functionMode.contains("3") == true) {
				if (resultStatus >= 0) {
					resultStatus = thisManager.CombineCSV_Start();
				} else {
					//thisManager.CombineCSV_Start();
				}
				
			}
			
			
			UtilClass.DebugOutput("---");
			UtilClass.DebugOutput("Finished, closed.");
			
			if (resultStatus == -1) {
				UtilClass.StatusOutput("Failed!",Color.RED);
			} else if (resultStatus == 1) {
				UtilClass.StatusOutput("Success!",Color.GREEN);
			} else if (resultStatus == -2) {
				UtilClass.StatusOutput("Cancelation complete.", Color.GRAY);
			} else {
				UtilClass.StatusOutput("Uncertain status.",Color.GRAY);
			}
			
			cancelRequest = 0;
			currentlyRunning = 0;
			
			return 0;
		}
    	
    }
    
    private void Execute() {
    	
    	//EventQueue.invokeLater(executeThread);
    	/*ExecutorService execService = Executors.newFixedThreadPool(1);
    	execService.execute(executeThread);
    	execService.shutdown();
		try {
			execService.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		execService.shutdownNow();*/
    	new ExampleWorker().execute();
    	
		/*UtilClass.DebugOutput("Starting up ImageJ Batch Job Handler (or whatever software we're launching multiple instances of) in 2 seconds.");
		UtilClass.DebugOutput("VERSION: " + UtilClass.version);
		UtilClass.DebugOutput("---");
		try {
			TimeUnit.SECONDS.sleep(2);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		
		if (functionMode.contains("1") == true) {
			// if inputData == null and inputDataDir != null, read all image files in that immediate directory
			if (task01images.length()>0 && task01imagesDir.length()>0) {
				int task01imagesNum = Integer.parseInt(task01images.replace("|", ""));
				int task01imagesDirNum = Integer.parseInt(task01imagesDir.replace("|", ""));
				if ((task01input[task01imagesNum] == null || task01input[task01imagesNum].length == 0) && (task01input[task01imagesDirNum] != null)) {
					File fileDirectory = new File (task01input[task01imagesDirNum][0]);
					if (fileDirectory.isDirectory() == true) {
						File[] f = fileDirectory.listFiles(new FilenameFilter() {
							@Override
							public boolean accept(File dir, String name) {
								boolean returnValue = false;
								if (name.toLowerCase().endsWith(".jpg")
										|| name.toLowerCase().endsWith(".jpeg")
										|| name.toLowerCase().endsWith(".png")
										|| name.toLowerCase().endsWith(".gif")
										|| name.toLowerCase().endsWith(".tif")
										|| name.toLowerCase().endsWith(".tiff")) {
									returnValue = true;
								}
								return returnValue;
							}
						});
						task01input[task01imagesNum] = new String[f.length];
						for (int i = 0; i < f.length; i++) {
							task01input[task01imagesNum][i] = f[i].getName();
						}
					}	
				}
			}
			if (printParam == true) {
				UtilClass.DebugOutput("****These are the recognized input parameters (if not specified by the user, these are the defaults).****");
				UtilClass.DebugOutput("gui = " + gui);
				UtilClass.DebugOutput("functionMode = " + functionMode);
				UtilClass.DebugOutput("task01maxThreads = " + task01maxThreads);
				UtilClass.DebugOutput("task01timeout = " + task01timeout);
				UtilClass.DebugOutput("task01retryFails = " + task01retryFails);
				UtilClass.DebugOutput("task01cmd = " + task01cmd);
				UtilClass.DebugOutput("task01imagesDir = " + task01imagesDir);
				UtilClass.DebugOutput("task01images = " + task01images);
				for (int a = 0; a < task01input.length; a++) {
					if (task01input[a] != null) {
						UtilClass.DebugOutput("task01input0" + a + " = ");
						for (int b = 0; b < task01input[a].length; b++) {
							UtilClass.DebugOutput(task01input[a][b]);
							if (b < task01input[a].length - 1) {
								UtilClass.DebugOutput(", ");
							}
						}
						UtilClass.DebugOutput("\n");
					}
				}
				UtilClass.DebugOutput("****End of input parameters.****\n\n");
			}
			thisManager.task01maxThreads = task01maxThreads;
			thisManager.task01timeout = task01timeout;
			thisManager.task01retryFails = task01retryFails;
			thisManager.task01cmd = task01cmd;
			thisManager.task01input = task01input;
			thisManager.task01images = Integer.parseInt(task01images.replace("|", ""));
			thisManager.Initialize_Start();
		}
		if (functionMode.contains("2") == true) {
			if (task02images.length()>0 && task02imagesDir.length()>0) {
				int task02imagesNum = Integer.parseInt(task02images.replace("|", ""));
				int task02imagesDirNum = Integer.parseInt(task02imagesDir.replace("|", ""));
				if ((task02input[task02imagesNum] == null || task02input[task02imagesNum].length == 0) && (task02input[task02imagesDirNum] != null)) {
					File fileDirectory = new File (task02input[task02imagesDirNum][0]);
					if (fileDirectory.isDirectory() == true) {
						File[] f = fileDirectory.listFiles(new FilenameFilter() {
							@Override
							public boolean accept(File dir, String name) {
								boolean returnValue = false;
								if (name.toLowerCase().endsWith(".jpg")
										|| name.toLowerCase().endsWith(".jpeg")
										|| name.toLowerCase().endsWith(".png")
										|| name.toLowerCase().endsWith(".gif")
										|| name.toLowerCase().endsWith(".tif")
										|| name.toLowerCase().endsWith(".tiff")) {
									returnValue = true;
								}
								return returnValue;
							}
						});
						task02input[task02imagesNum] = new String[f.length];
						for (int i = 0; i < f.length; i++) {
							task02input[task02imagesNum][i] = f[i].getName();
						}
					}	
				}
			}
			if (printParam == true) {
				UtilClass.DebugOutput("****These are the recognized input parameters (if not specified by the user, these are the defaults).****");
				UtilClass.DebugOutput("task02maxThreads = " + task02maxThreads);
				UtilClass.DebugOutput("task02timeout = " + task02timeout);
				UtilClass.DebugOutput("task02retryFails = " + task02retryFails);
				UtilClass.DebugOutput("task02cmd = " + task02cmd);
				UtilClass.DebugOutput("task02imagesDir = " + task02imagesDir);
				UtilClass.DebugOutput("task02images = " + task02images);
				for (int a = 0; a < task02input.length; a++) {
					if (task02input[a] != null) {
						UtilClass.DebugOutput("task02input0" + a + " = ");
						for (int b = 0; b < task02input[a].length; b++) {
							UtilClass.DebugOutput(task02input[a][b]);
							if (b < task02input[a].length - 1) {
								UtilClass.DebugOutput(", ");
							}
						}
						UtilClass.DebugOutput("\n");
					}
				}
				UtilClass.DebugOutput("****End of input parameters.****\n\n");
			}
			thisManager.task02maxThreads = task02maxThreads;
			thisManager.task02timeout = task02timeout;
			thisManager.task02retryFails = task02retryFails;
			thisManager.task02cmd = task02cmd;
			thisManager.task02input = task02input;
			thisManager.task02images = Integer.parseInt(task02images.replace("|", ""));
			thisManager.task02imagesDir = Integer.parseInt(task02imagesDir.replace("|", ""));
			thisManager.ImageJ_StartJobs();
		} 
		if (functionMode.contains("3") == true) {
			thisManager.CombineCSV_Start();
		}
		
		
		UtilClass.DebugOutput("---");
		UtilClass.DebugOutput("Finished, closed.");*/
    }
    
    private void Cancel() {
    	UtilClass.DebugOutput("CANCEL REQUESTED, pending...");
    	cancelRequest = 1;
    	thisManager.CancelTasks();
    	//UtilClass.DebugOutput("CANCEL COMPLETED.");
    }
    
    public void ClearOutput() {
    	jtextarea_debug.setText("");
    	jlabel_status.setText("not running.");
    	jpanel_status.setBackground(Color.LIGHT_GRAY);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageJ_Jobs_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageJ_Jobs_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageJ_Jobs_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageJ_Jobs_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

    	ImageJ_Jobs_GUI thisGUI;
    	thisGUI = new ImageJ_Jobs_GUI();
    	thisGUI.StartGUI();

    }
    
    public void StartGUI() {
    	
    	initComponents();
    	
    	if (thisManager == null) {
    		thisManager = new ImageJ_Manager();
    	}
    	
    	
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	UtilClass.jtextarea_debug = jtextarea_debug;
            	UtilClass.jlabel_status = jlabel_status;
            	UtilClass.jpanel_status = jpanel_status;
            	UtilClass.gui = true;
                setVisible(true);
                ClearOutput();
            }
        });
    }
    
    public ImageJ_Manager thisManager;
    

    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenu jMenu_edit;
    private javax.swing.JMenu jMenu_file;
    private javax.swing.JPanel jP_task01;
    private javax.swing.JPanel jP_task02;
    private javax.swing.JPanel jP_task03;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTF_task01_1;
    private javax.swing.JTextField jTF_task01_2;
    private javax.swing.JTextField jTF_task01_3;
    private javax.swing.JTextField jTF_task01_4;
    private javax.swing.JTextField jTF_task01_5;
    private javax.swing.JTextField jTF_task01_6;
    private javax.swing.JTextField jTF_task01_7;
    private javax.swing.JTextField jTF_task01_8;
    private javax.swing.JTextField jTF_task01_9;
    private javax.swing.JTextField jTF_task01cmd;
    private javax.swing.JTextField jTF_task01img;
    private javax.swing.JTextField jTF_task01imgdir;
    private javax.swing.JTextField jTF_task01retry;
    private javax.swing.JTextField jTF_task01threads;
    private javax.swing.JTextField jTF_task01timeout;
    private javax.swing.JTextField jTF_task02_1;
    private javax.swing.JTextField jTF_task02_2;
    private javax.swing.JTextField jTF_task02_3;
    private javax.swing.JTextField jTF_task02_4;
    private javax.swing.JTextField jTF_task02_5;
    private javax.swing.JTextField jTF_task02_6;
    private javax.swing.JTextField jTF_task02_7;
    private javax.swing.JTextField jTF_task02_8;
    private javax.swing.JTextField jTF_task02_9;
    private javax.swing.JTextField jTF_task02cmd;
    private javax.swing.JTextField jTF_task02img;
    private javax.swing.JTextField jTF_task02imgdir;
    private javax.swing.JTextField jTF_task02retry;
    private javax.swing.JTextField jTF_task02threads;
    private javax.swing.JTextField jTF_task02timeout;
    private javax.swing.JButton jbutton_execute;
    private javax.swing.JButton jbutton_cancel;
    private javax.swing.JCheckBox jcheckbox_task1;
    private javax.swing.JCheckBox jcheckbox_task2;
    private javax.swing.JCheckBox jcheckbox_task3;
    private javax.swing.JLabel jlabel_debugtitle;
    private javax.swing.JLabel jlabel_status;
    private javax.swing.JPanel jpanel_status;
    private javax.swing.JTextArea jtextarea_debug;
    
    // cancelRequest: 0 = not requested, 1 = requested to cancel
    public int cancelRequest = 0;
    // End of variables declaration                   
}
